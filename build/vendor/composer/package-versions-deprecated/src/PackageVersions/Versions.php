<?php

declare (strict_types=1);
namespace Lazysizes\Vendor\PackageVersions;

use Lazysizes\Vendor\Composer\InstalledVersions;
use OutOfBoundsException;
\class_exists(\Lazysizes\Vendor\Composer\InstalledVersions::class);
/**
 * This class is generated by composer/package-versions-deprecated, specifically by
 * @see \PackageVersions\Installer
 *
 * This file is overwritten at every run of `composer install` or `composer update`.
 *
 * @deprecated in favor of the Composer\InstalledVersions class provided by Composer 2. Require composer-runtime-api:^2 to ensure it is present.
 */
final class Versions
{
    /**
     * @deprecated please use {@see self::rootPackageName()} instead.
     *             This constant will be removed in version 2.0.0.
     */
    const ROOT_PACKAGE_NAME = '16patsle/lazysizes';
    /**
     * Array of all available composer packages.
     * Dont read this array from your calling code, but use the \PackageVersions\Versions::getVersion() method instead.
     *
     * @var array<string, string>
     * @internal
     */
    const VERSIONS = array('composer/installers' => 'v1.9.0@b93bcf0fa1fccb0b7d176b0967d969691cd74cca', 'kornrunner/blurhash' => 'v1.1.0@5a09325353229c108c8d2ff129ec08b447753f9b', 'composer/package-versions-deprecated' => '1.11.99.1@7413f0b55a051e89485c5cb9f765fe24bb02a7b6', 'dealerdirect/phpcodesniffer-composer-installer' => 'v0.7.0@e8d808670b8f882188368faaf1144448c169c0b7', 'humbug/php-scoper' => '0.13.10@e56b0d91b344181c9a73119454c05a5498bf56e4', 'jetbrains/phpstorm-stubs' => 'dev-master@1b7fe33233bd0f29c2ebf3beccf622af8261e78a', 'nikic/php-parser' => 'v4.6.0@c346bbfafe2ff60680258b631afb730d186ed864', 'phpcompatibility/php-compatibility' => '9.3.5@9fb324479acf6f39452e0655d2429cc0d3914243', 'phpcompatibility/phpcompatibility-paragonie' => '1.3.0@b862bc32f7e860d0b164b199bd995e690b4b191c', 'phpcompatibility/phpcompatibility-wp' => '2.1.0@41bef18ba688af638b7310666db28e1ea9158b2f', 'psr/container' => '1.0.0@b7ce3b176482dbbc1245ebf52b181af44c2cf55f', 'squizlabs/php_codesniffer' => '3.5.5@73e2e7f57d958e7228fce50dc0c61f58f017f9f6', 'symfony/console' => 'v4.4.10@326b064d804043005526f5a0494cfb49edb59bb0', 'symfony/filesystem' => 'v4.4.10@b27f491309db5757816db672b256ea2e03677d30', 'symfony/finder' => 'v4.4.10@5729f943f9854c5781984ed4907bbb817735776b', 'symfony/polyfill-ctype' => 'v1.17.1@2edd75b8b35d62fd3eeabba73b26b8f1f60ce13d', 'symfony/polyfill-mbstring' => 'v1.17.1@7110338d81ce1cbc3e273136e4574663627037a7', 'symfony/polyfill-php73' => 'v1.17.1@fa0837fe02d617d31fbb25f990655861bb27bd1a', 'symfony/polyfill-php80' => 'v1.17.1@4a5b6bba3259902e386eb80dd1956181ee90b5b2', 'symfony/service-contracts' => 'v2.1.3@58c7475e5457c5492c26cc740cc0ad7464be9442', 'wp-coding-standards/wpcs' => '2.3.0@7da1894633f168fe244afc6de00d141f27517b62', '16patsle/lazysizes' => 'dev-develop@757e7d8c9a30d381eb02531eecc58668dce4611c');
    private function __construct()
    {
    }
    /**
     * @psalm-pure
     *
     * @psalm-suppress ImpureMethodCall we know that {@see InstalledVersions} interaction does not
     *                                  cause any side effects here.
     */
    public static function rootPackageName() : string
    {
        if (!\class_exists(\Lazysizes\Vendor\Composer\InstalledVersions::class, \false) || !\Lazysizes\Vendor\Composer\InstalledVersions::getRawData()) {
            return self::ROOT_PACKAGE_NAME;
        }
        return \Lazysizes\Vendor\Composer\InstalledVersions::getRootPackage()['name'];
    }
    /**
     * @throws OutOfBoundsException If a version cannot be located.
     *
     * @psalm-param key-of<self::VERSIONS> $packageName
     * @psalm-pure
     *
     * @psalm-suppress ImpureMethodCall we know that {@see InstalledVersions} interaction does not
     *                                  cause any side effects here.
     */
    public static function getVersion(string $packageName) : string
    {
        if (\class_exists(\Lazysizes\Vendor\Composer\InstalledVersions::class, \false) && \Lazysizes\Vendor\Composer\InstalledVersions::getRawData()) {
            return \Lazysizes\Vendor\Composer\InstalledVersions::getPrettyVersion($packageName) . '@' . \Lazysizes\Vendor\Composer\InstalledVersions::getReference($packageName);
        }
        if (isset(self::VERSIONS[$packageName])) {
            return self::VERSIONS[$packageName];
        }
        throw new \OutOfBoundsException('Required package "' . $packageName . '" is not installed: check your ./vendor/composer/installed.json and/or ./composer.lock files');
    }
}
